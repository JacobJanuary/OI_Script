import requests


def analyze_btc_pairs():
    """–ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –∫ BTC –Ω–∞ Binance"""

    print("–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å Binance API...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º 24-—á–∞—Å–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä
        response = requests.get('https://api.binance.com/api/v3/ticker/24hr')
        response.raise_for_status()
        data = response.json()

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–∞—Ä—ã –∫ BTC
        btc_pairs = []

        for ticker in data:
            if ticker['symbol'].endswith('BTC'):
                quote_volume = float(ticker['quoteVolume'])
                btc_pairs.append({
                    'symbol': ticker['symbol'],
                    'volume': float(ticker['volume']),
                    'quoteVolume': quote_volume,
                    'count': int(ticker['count']),
                    'priceChange': float(ticker['priceChange']),
                    'priceChangePercent': float(ticker['priceChangePercent']),
                    'lastPrice': float(ticker['lastPrice'])
                })

        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_pairs = len(btc_pairs)
        pairs_less_1btc = [pair for pair in btc_pairs if pair['quoteVolume'] < 1.0]
        pairs_more_1btc = [pair for pair in btc_pairs if pair['quoteVolume'] >= 1.0]

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä—ã —Å –æ–±—ä–µ–º–æ–º >= 1 BTC –ø–æ —É–±—ã–≤–∞–Ω–∏—é
        pairs_more_1btc.sort(key=lambda x: x['quoteVolume'], reverse=True)

        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("=" * 80)
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–û–†–ì–û–í–´–• –ü–ê–† –ö BTC –ù–ê BINANCE")
        print("=" * 80)
        print(f"üîπ –í—Å–µ–≥–æ –ø–∞—Ä —Ç–æ—Ä–≥—É–µ—Ç—Å—è –∫ BTC: {total_pairs}")
        print(f"üî∏ –ü–∞—Ä —Å –æ–±—ä–µ–º–æ–º –º–µ–Ω–µ–µ 1 BTC: {len(pairs_less_1btc)} ({len(pairs_less_1btc) / total_pairs * 100:.1f}%)")
        print(
            f"üî∏ –ü–∞—Ä —Å –æ–±—ä–µ–º–æ–º 1 BTC –∏ –±–æ–ª–µ–µ: {len(pairs_more_1btc)} ({len(pairs_more_1btc) / total_pairs * 100:.1f}%)")

        # –û–±—â–∏–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤
        total_volume = sum(pair['quoteVolume'] for pair in btc_pairs)
        volume_more_1btc = sum(pair['quoteVolume'] for pair in pairs_more_1btc)

        print(f"üî∏ –û–±—â–∏–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ –≤—Å–µ—Ö –ø–∞—Ä: {total_volume:.2f} BTC")
        print(f"üî∏ –û–±—ä–µ–º –ø–∞—Ä >= 1 BTC: {volume_more_1btc:.2f} BTC ({volume_more_1btc / total_volume * 100:.1f}%)")

        # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ä —Å –æ–±—ä–µ–º–æ–º >= 1 BTC
        if pairs_more_1btc:
            print("\n" + "=" * 80)
            print("üìà –ü–ê–†–´ –° –û–ë–™–ï–ú–û–ú >= 1 BTC (–û–¢–°–û–†–¢–ò–†–û–í–ê–ù–´ –ü–û –£–ë–´–í–ê–ù–ò–Æ)")
            print("=" * 80)
            print(f"{'‚Ññ':>3} {'–ü–∞—Ä–∞':15} {'–û–±—ä–µ–º (BTC)':>15} {'–°–¥–µ–ª–æ–∫':>8} {'–¶–µ–Ω–∞':>12} {'–ò–∑–º. %':>8}")
            print("-" * 80)

            for i, pair in enumerate(pairs_more_1btc, 1):
                price_change_color = "üìà" if pair['priceChangePercent'] >= 0 else "üìâ"
                print(f"{i:3d} {pair['symbol']:15} {pair['quoteVolume']:>15.2f} "
                      f"{pair['count']:>8,} {pair['lastPrice']:>12.8f} "
                      f"{price_change_color}{pair['priceChangePercent']:>6.2f}%")

            print("-" * 80)
            print(f"–¢–æ–ø-3 –ø–æ –æ–±—ä–µ–º—É:")
            for i, pair in enumerate(pairs_more_1btc[:3], 1):
                print(f"  {i}. {pair['symbol']}: {pair['quoteVolume']:,.2f} BTC")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        if btc_pairs:
            print(f"\nüìä –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê:")
            print(f"üî∏ –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º –Ω–∞ –ø–∞—Ä—É: {total_volume / total_pairs:.4f} BTC")

            # –ú–µ–¥–∏–∞–Ω–∞
            sorted_volumes = sorted([p['quoteVolume'] for p in btc_pairs])
            median_volume = sorted_volumes[len(sorted_volumes) // 2]
            print(f"üî∏ –ú–µ–¥–∏–∞–Ω–Ω—ã–π –æ–±—ä–µ–º: {median_volume:.8f} BTC")

            # –ü–∞—Ä—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –æ–±—ä–µ–º–∞–º–∏
            pairs_0_01 = len([p for p in btc_pairs if 0.01 <= p['quoteVolume'] < 0.1])
            pairs_0_1 = len([p for p in btc_pairs if 0.1 <= p['quoteVolume'] < 1])
            pairs_1_10 = len([p for p in btc_pairs if 1 <= p['quoteVolume'] < 10])
            pairs_10_plus = len([p for p in btc_pairs if p['quoteVolume'] >= 10])

            print(f"üî∏ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –æ–±—ä–µ–º–∞–º:")
            print(f"   ‚Ä¢ 0.01-0.1 BTC: {pairs_0_01} –ø–∞—Ä")
            print(f"   ‚Ä¢ 0.1-1 BTC: {pairs_0_1} –ø–∞—Ä")
            print(f"   ‚Ä¢ 1-10 BTC: {pairs_1_10} –ø–∞—Ä")
            print(f"   ‚Ä¢ 10+ BTC: {pairs_10_plus} –ø–∞—Ä")

            # –°–∞–º–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è –∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è –ø–∞—Ä–∞
            most_active = max(btc_pairs, key=lambda x: x['quoteVolume'])
            least_active = min([p for p in btc_pairs if p['quoteVolume'] > 0],
                               key=lambda x: x['quoteVolume'], default=btc_pairs[0])

            print(f"üî∏ –°–∞–º–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–∞—Ä–∞: {most_active['symbol']} ({most_active['quoteVolume']:.2f} BTC)")
            print(f"üî∏ –ù–∞–∏–º–µ–Ω–µ–µ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–∞—Ä–∞: {least_active['symbol']} ({least_active['quoteVolume']:.8f} BTC)")

        print("=" * 80)

    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


# –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
if __name__ == "__main__":
    analyze_btc_pairs()